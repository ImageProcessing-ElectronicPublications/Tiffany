#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import sys
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import qApp, QApplication, QMainWindow, QMessageBox, QProgressBar, QLabel, QColorDialog
from PyQt5.QtGui import QImage, QPixmap, QPalette, QPainter

from mainWin import Ui_MainWindow
from Bookmarks import Bookmarks
from ColorQToolButton import ColorQToolButton
from PopupQToolButton import PopupQToolButton
from Viewer import Viewer

class Window(QMainWindow, Ui_MainWindow):
    def __init__(self, parent=None):
        super().__init__(parent)
        self.setupUi(self)
        self.connectSignalsSlots()

        # Status bar
        self.statusLabel = QLabel("Ready")
        self.statusbar.addWidget(self.statusLabel)

        # Hand assemble toolbar items
        self.buildToolBar()

        # Better fit
        _translate = QtCore.QCoreApplication.translate
        self.rotateCWAct.setText(_translate("MainWindow", "Rotate\nCW"))
        self.rotateCCWAct.setText(_translate("MainWindow", "Rotate\nCCW"))
        self.rotate180Act.setText(_translate("MainWindow", "Rotate\n180"))
        self.zoomInAct.setText(_translate("MainWindow", "Zoom\n&In (25%)"))
        self.zoomOutAct.setText(_translate("MainWindow", "Zoom\n&Out (25%)"))
        self.fitToWindowAct.setText(_translate("MainWindow", "&Fit to\nWindow"))

        # Recolor
        self.scrollArea.setBackgroundRole(QPalette.Base)

        # Pass scrollArea to viewer for scrollbar manipulation
        self.viewer.scrollArea = self.scrollArea

    def connectSignalsSlots(self):
        # File menu
        self.openAct.triggered.connect(self.bookmarks.readFiles)
        self.insertAct.triggered.connect(self.bookmarks.readFiles)
        self.replaceAct.triggered.connect(self.bookmarks.readFiles)
        self.saveAct.triggered.connect(self.bookmarks.writeFiles)
        self.saveAsAct.triggered.connect(self.bookmarks.writeFiles)
        self.createTIFFAct.triggered.connect(self.bookmarks.writeFiles)
        self.exitAct.triggered.connect(self.close)
        # Edit menu
        self.selectAllAct.triggered.connect(self.bookmarks.selectAll)
        self.selectEvenAct.triggered.connect(self.bookmarks.selectEven)
        self.selectOddAct.triggered.connect(self.bookmarks.selectOdd)
        self.deleteAct.triggered.connect(self.bookmarks.deleteSelection)
        self.moveAct.triggered.connect(self.bookmarks.moveMode)
        self.rotateCWAct.triggered.connect(self.bookmarks.rotateSelection)
        self.rotateCCWAct.triggered.connect(self.bookmarks.rotateSelection)
        self.rotate180Act.triggered.connect(self.bookmarks.rotateSelection)
        # View menu
        self.zoomInAct.triggered.connect(self.viewer.zoomIn)
        self.zoomOutAct.triggered.connect(self.viewer.zoomOut)
        self.fitToWindowAct.triggered.connect(self.viewer.fitToWindow)
        self.fillWindowAct.triggered.connect(self.viewer.fillWindow)
        self.fitWidthAct.triggered.connect(self.viewer.fitWidth)
        self.fitHeightAct.triggered.connect(self.viewer.fitHeight)
        # Tools menu
        self.pointerAct.triggered.connect(self.viewer.pointerMode)
        self.pencilAct.triggered.connect(self.viewer.pencilMode)
        self.eraserAct.triggered.connect(self.viewer.eraserMode)
        self.areaFillAct.triggered.connect(self.viewer.areaFillMode)
        # Stroke menu
        self.pix1Act.triggered.connect(self.viewer.setBrush)
        self.pix4Act.triggered.connect(self.viewer.setBrush)
        self.pix8Act.triggered.connect(self.viewer.setBrush)
        self.pix12Act.triggered.connect(self.viewer.setBrush)
        # Button
        self.undoAct.triggered.connect(self.viewer.undoEdit)
        self.redoAct.triggered.connect(self.viewer.redoEdit)
        self.colorAct.triggered.connect(self.colorMagic)
        self.stuffAct.triggered.connect(self.viewer.removeMarkup)
        # Help menu
        self.aboutAct.triggered.connect(self.about)
        self.aboutQtAct.triggered.connect(qApp.aboutQt)
        # Interconnects
        self.bookmarks.progressSig.connect(self.updateProgress)
        self.viewer.progressSig.connect(self.updateProgress)
        self.viewer.zoomSig.connect(self.updateActions)
        self.viewer.imageChangedSig.connect(self.bookmarks.updateIcon)
        self.bookmarks.currentItemChanged.connect(self.viewer.imageSelected)

    def colorMagic(self):
        if self.colorToolButton.mode == "Foreground":
            self.viewer.foregroundColor = QColorDialog.getColor()
        elif self.colorToolButton.mode == "Background":
            self.viewer.backgroundColor = QColorDialog.getColor()
        elif self.colorToolButton.mode == "Swap":
            self.viewer.foregroundColor, self.viewer.backgroundColor = self.viewer.backgroundColor, self.viewer.foregroundColor
        elif self.colorToolButton.mode == "Reset":
            self.viewer.foregroundColor = QtCore.Qt.black
            self.viewer.backgroundColor = QtCore.Qt.white
        self.colorToolButton.setIcon(self.viewer.foregroundColor, self.viewer.backgroundColor)

    def buildToolBar(self):
        self.openMenu = QtWidgets.QMenu(self)
        self.openMenu.addAction(self.openAct)
        self.openMenu.addAction(self.insertAct)
        self.openMenu.addAction(self.replaceAct)
        self.openToolButton = PopupQToolButton()
        self.openToolButton.setMenu(self.openMenu)
        self.openToolButton.setDefaultAction(self.openAct)
        self.toolBar.addWidget(self.openToolButton)

        self.saveMenu = QtWidgets.QMenu(self)
        self.saveMenu.addAction(self.saveAct)
        self.saveMenu.addAction(self.saveAsAct)
        self.saveMenu.addAction(self.createTIFFAct)
        self.saveToolButton = PopupQToolButton()
        self.saveToolButton.setMenu(self.saveMenu)
        self.saveToolButton.setDefaultAction(self.saveAct)
        self.toolBar.addWidget(self.saveToolButton)

        self.toolBar.addAction(self.deleteAct)

        self.rotateMenu = QtWidgets.QMenu(self)
        self.rotateMenu.addAction(self.rotateCWAct)
        self.rotateMenu.addAction(self.rotateCCWAct)
        self.rotateMenu.addAction(self.rotate180Act)
        self.rotateToolButton = PopupQToolButton()
        self.rotateToolButton.setMenu(self.rotateMenu)
        self.rotateToolButton.setDefaultAction(self.rotateCWAct)
        self.toolBar.addWidget(self.rotateToolButton)

        self.toolBar.addAction(self.undoAct)
        self.toolBar.addAction(self.redoAct)
        self.toolBar.addAction(self.zoomOutAct)
        self.toolBar.addAction(self.zoomInAct)

        self.toolsMenu = QtWidgets.QMenu(self)
        self.toolsMenu.addAction(self.pointerAct)
        self.toolsMenu.addAction(self.pencilAct)
        self.toolsMenu.addAction(self.eraserAct)
        self.toolsMenu.addAction(self.areaFillAct)
        self.toolsToolButton = PopupQToolButton()
        self.toolsToolButton.setMenu(self.toolsMenu)
        self.toolsToolButton.setDefaultAction(self.pointerAct)
        self.toolBar.addWidget(self.toolsToolButton)

        self.toolSizeMenu = QtWidgets.QMenu(self)
        self.toolSizeMenu.addAction(self.pix1Act)
        self.toolSizeMenu.addAction(self.pix4Act)
        self.toolSizeMenu.addAction(self.pix8Act)
        self.toolSizeMenu.addAction(self.pix12Act)
        self.toolSizeToolButton = PopupQToolButton()
        self.toolSizeToolButton.setMenu(self.toolSizeMenu)
        self.toolSizeToolButton.setDefaultAction(self.pix1Act)
        self.toolBar.addWidget(self.toolSizeToolButton)

        self.colorToolButton = ColorQToolButton()
        self.colorToolButton.setDefaultAction(self.colorAct)
        self.colorToolButton.setIcon(self.viewer.foregroundColor, self.viewer.backgroundColor)
        self.toolBar.addWidget(self.colorToolButton)

        self.toolBar.addAction(self.stuffAct)

    def updateProgress(self, txt, val):
        if txt != "":
            # Add progress to status bar
            self.statusLabel.setText(txt)
            self.pbar = QProgressBar()
            self.pbar.setMaximumHeight(17)
            self.pbar.setRange(0, val)
            self.pbar.setValue(0)
            self.statusbar.addWidget(self.pbar)
        elif val < 0:
            # Clean up status bar
            self.statusbar.removeWidget(self.pbar)
            self.statusLabel.setText("Ready")
        else:
            self.pbar.setValue(val)

    def updateActions(self):
        self.zoomInAct.setEnabled(self.viewer.scaleFactor < 10.0)
        self.zoomOutAct.setEnabled(self.viewer.scaleFactor > 0.1)

    def about(self):
        QMessageBox.about(
            self,
            "About Tiffany",
            "<p><b>Tiffany</b> is an image editor tuned for cleaning"
            "up scanned images</p>"
        )

if __name__ == "__main__":
    app = QApplication(sys.argv)
    win = Window()
    win.show()
    sys.exit(app.exec())

